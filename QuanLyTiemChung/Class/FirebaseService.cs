using System;
using System.Globalization;
using System.Threading.Tasks;
using System.Windows.Data;
using Firebase.Database;
using Firebase.Database.Query;
using Newtonsoft.Json;

namespace QuanLyTiemChung.Class
{
    public class FirebaseService
    {
        private readonly FirebaseClient _firebaseClient;

        public FirebaseService()
        {
            // Initialize FirebaseClient with your Firebase Database URL
            _firebaseClient = new FirebaseClient("https://quanlytiemchung-f225a.firebaseio.com");
        }

        // Save a new patient to Firebase (generates a new key for patient)
        public async Task SavePatientData(Patient patient)
        {
            try
            {
                var patientJson = JsonConvert.SerializeObject(patient); // Convert patient object to JSON

                // Add the patient under "patients" node with a new key generated by Firebase
                var dino = await _firebaseClient
                    .Child("patients")
                    .PostAsync(patientJson);

                Console.WriteLine($"Key for the new patient: {dino.Key}");
                Console.WriteLine("Patient data has been saved successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving patient data: {ex.Message}");
            }
        }

        // Update patient data at a specific location (this will overwrite existing data)
        public async Task UpdatePatientData(string patientId, Patient patient)
        {
            try
            {
                var patientJson = JsonConvert.SerializeObject(patient);

                // Update existing patient record with the given patientId
                await _firebaseClient
                    .Child("patients")
                    .Child(patientId)  // Use the existing patient ID
                    .PutAsync(patientJson);

                Console.WriteLine("Patient data updated successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating patient data: {ex.Message}");
            }
        }

        // Delete a patient record by its ID
        public async Task DeletePatientData(string patientId)
        {
            try
            {
                // Delete the patient record by patientId
                await _firebaseClient
                    .Child("patients")
                    .Child(patientId)  // Specify the patient ID to delete
                    .DeleteAsync();

                Console.WriteLine("Patient data deleted successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting patient data: {ex.Message}");
            }
        }
    }
}


namespace QuanLyTiemChung.MVVM
{
    public class PatientToNameConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is Patient patient)
            {
                // You can change this to return any other property of the Patient class
                return patient.Name;  // Display the Name of the patient
            }

            return string.Empty;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // We don't need to handle ConvertBack unless you plan to edit and update Patient
            throw new NotImplementedException();
        }
    }
}
